import backtrader as bt
import backtrader.feeds as btfeeds
from datetime import datetime
import datetime
import backtrader.plot
import matplotlib 
matplotlib.use('TKAgg')
from matplotlib import pyplot as plt
from backtrader_plotting import Bokeh
from backtrader_plotting.schemes import Tradimo

class GenericCSV_PE(btfeeds.GenericCSVData):

    # Add a 'pe' line to the inherited ones from the base class
    lines = ('dyn_corr',)

    # openinterest in GenericCSVData has index 7 ... add 1
    # add the parameter to the parameters inherited from the base class
    params = (('dyn_corr', 8),)


class firstStrategy(bt.Strategy):

    def __init__(self):
        self.rsi = bt.indicators.RSI_SMA(self.data.close, period=21)

    def next(self):
        if not self.position:
            if self.rsi < 40:
                self.buy(size=1)
        else:
            if self.rsi > 65:
                self.sell(size=11)


#Variable for our starting cash
startcash = 10000

#Create an instance of cerebro
cerebro = bt.Cerebro()

#Add our strategy
cerebro.addstrategy(firstStrategy)

#Get S&P500 from CSV
data = GenericCSV_PE(
    dataname='dataset.csv',

#     fromdate=datetime.datetime(2019, 1, 1),
#     todate=datetime.datetime(2019, 12, 31),

    nullvalue=0.0,

    dtformat=('%Y-%m-%d'),
  
    datetime=1,
    open=2,
    high=3,
    low=4,

    close=5,
    adjusted = 6,
#     volume=7,
    dyn_corr=11
        )

#Add the data to Cerebro
cerebro.adddata(data)

# Set our desired cash start
cerebro.broker.setcash(startcash)

# Run over everything
cerebro.run()

#Get final portfolio Value
portvalue = cerebro.broker.getvalue()
pnl = portvalue - startcash

#Print out the final result
print('Final Portfolio Value: ${}'.format(portvalue))
print('Initial Portfolio Value: ${}'.format(startcash))
print('P/L: ${}'.format(pnl))

#Finally plot the end results
cerebro.plot(iplot=False)
cerebro.plot()
