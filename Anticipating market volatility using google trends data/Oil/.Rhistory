####cleaning#########
rm(list=ls()) #clear all variables
graphics.off()  # clean up graphic window
cat("\014") #clear the workspace
# Loading Libraries
library(rugarch); library(fGarch); library(rmgarch); library(zoo); library(ggplot2)
### import data##
data = read.csv("C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_3/apollo 3/dataset/dataset2_tsla.csv", header = TRUE, stringsAsFactors = FALSE)
### import data##
data = read.csv("C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_3/apollo 3/dataset/dataset2_tesla.csv", header = TRUE, stringsAsFactors = FALSE)
### import data##
data = read.csv("C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset2_tesla.csv", header = TRUE, stringsAsFactors = FALSE)
View(data)
tesla = ts(data[6])
View(data)
trend_data = ts(data[15])
tesla = 100*diff(log(tesla))
plot(tesla)
trend_data = 100*diff(log(trend_data))
dataf = data.frame(dates,tesla,trend_data)
plot(trend_data)
plot(dataf$gen_trend,type = 'l' )
plot(dataf$tesla,type = 'l' )
summary(trend_data)
summary(tesla)
plot(dataf$gen_trend,dataf$tesla)
dataf = data.frame(dates,tesla,trend_data)
dates = data[2:nrow(data), 2  ]
dataf = data.frame(dates,tesla,trend_data)
plot(dataf$gen_trend,type = 'l' )
plot(dataf$tesla,type = 'l' )
summary(trend_data)
summary(tesla)
plot(dataf$gen_trend,dataf$tesla)
View(data)
View(dataf)
plot(dataf$tesla_gen_trend)
plot(dataf$tesla_gen_trend,dataf$tesla)
plot(dataf$tsla_price,type = 'l' )
plot(dataf$tesla_gen_trend = 'l' )
plot(dataf$tesla_gen_trend = 'l' )
plot(dataf$tesla_gen_trend, type = 'l' )
plot(dataf$tsla_price,type = 'l' )
plot(dataf$tsla_price,dataf$tesla)
tesla_2 = ts (tesla)^2 ##############squared returns
trend_data_2 = ts (trend_data)^2 ##############squared returns
#############################Leverage, autocorrelation and conditional correlation
plot(tesla[1:(length(tesla[,1])-1), 1], tesla[2:length(tesla[,1]), 1]^2, ylab = 'tesla_sq.ret', xlab = 'tesla_lag')
lines(ksmooth(tesla[1:(length(tesla[,1])-1), 1], tesla[2:length(tesla[,1]), 1]^2, 'normal', bandwidth = 6), col = 'red')
plot(trend_data[1:(length(tesla[,1])-1), 1], tesla[2:length(tesla[,1]), 1]^2, ylab = 'tesla_sq.ret', xlab = 'tesla_lag')
lines(ksmooth(trend_data[1:(length(tesla[,1])-1), 1], tesla[2:length(tesla[,1]), 1]^2, 'normal', bandwidth = 6), col = 'red')
acf_tesla = acf(tesla)
summary(acf_tesla)
lag_corr = ccf(dataf$tesla , dataf$gen_trend)
lag_corr_2 = ccf(tesla_2[ , 1],trend_data_2[ , 1])
lag_corr = ccf(dataf$tesla , dataf$gen_trend)
lag_corr = ccf(dataf$tsla_price , dataf$tesla_gen_trend)
lag_corr_2 = ccf(tesla_2[ , 1],trend_data_2[ , 1])
##########################regression#################################
reg_tesla_trend = lm(formula = dataf$tesla ~ dataf$gen_trend , x=TRUE, y=TRUE)
##########################regression#################################
reg_tesla_trend = lm(formula = dataf$tesla ~ dataf$gen_trend , x=TRUE, y=TRUE)
##########################regression#################################
reg_tesla_trend = lm(formula = dataf$tsla_price  ~ dataf$tsla_price _gen_trend, x=TRUE, y=TRUE)
reg_tesla_trend_2 = lm(formula = (dataf$tsla_price )^2 ~ (dataf$gen_trend)^2 , x=TRUE, y=TRUE)
summary(reg_tesla_trend)
summary(reg_tesla_trend_2)
plot(reg_tesla_trend)
##########################regression#################################
reg_tesla_trend = lm(formula = dataf$tsla_price  ~ dataf$tsla_price _gen_trend, x=TRUE, y=TRUE)
##########################regression#################################
reg_tesla_trend = lm(formula = dataf$tsla_price  ~ dataf$tesla_gen_trend, x=TRUE, y=TRUE)
##########################regression#################################
reg_tesla_trend = lm(formula = dataf$tsla_price  ~ dataf$tesla_gen_trend, x=TRUE, y=TRUE)
reg_tesla_trend_2 = lm(formula = (dataf$tsla_price )^2 ~ (dataf$gen_trend)^2 , x=TRUE, y=TRUE)
summary(reg_tesla_trend)
summary(reg_tesla_trend_2)
##########################regression#################################
reg_tesla_trend = lm(formula = dataf$tsla_price  ~ dataf$tesla_gen_trend, x=TRUE, y=TRUE)
reg_tesla_trend_2 = lm(formula = (dataf$tsla_price )^2 ~ (dataf$gen_trend)^2 , x=TRUE, y=TRUE)
##########################regression#################################
reg_tesla_trend = lm(formula = dataf$tsla_price  ~ dataf$tesla_gen_trend, x=TRUE, y=TRUE)
reg_tesla_trend_2 = lm(formula = (dataf$tsla_price )^2 ~ (dataf$gen_trend)^2 , x=TRUE, y=TRUE)
##########################regression#################################
reg_tesla_trend = lm(formula = dataf$tsla_price  ~ dataf$tesla_gen_trend, x=TRUE, y=TRUE)
reg_tesla_trend_2 = lm(formula = (dataf$tsla_price )^2 ~ (dataf$gen_trend)^2 , x=TRUE, y=TRUE)
reg_tesla_trend_2 = lm(formula = (dataf$tsla_price )^2 ~ (dataf$tesla_gen_trend)^2 , x=TRUE, y=TRUE)
summary(reg_tesla_trend)
summary(reg_tesla_trend_2)
plot(reg_tesla_trend)
plot(reg_tesla_trend_2)
#                                     variance.model = list(garchOrder = c(1,1), model = "sGARCH"),
#                                     distribution.model = "std" )
#   t_garch.fit.trend= ugarchfit(spec=t_garch.spec.trend, data=data$tesla, solver.control=list(trace = 1))
#
#   info_garch[i,j] = infocriteria(t_garch.fit.trend)[1]
#   }
#
# }
# ############################arma(4,3) is the best
######################################t- GARCH (1,1)
t_garch.spec.trend = ugarchspec(mean.model = list(armaOrder = c(0,0)),
variance.model = list(garchOrder = c(1,1), model = "sGARCH"),
distribution.model = "std" )
# Model Fitting
t_garch.fit.trend = ugarchfit(spec=t_garch.spec.trend, data=data$tsla_price, solver.control=list(trace = 1))
t_garch.fit.trend@fit$hessian
windows(); par(mfcol = c(2,2))
# Model Fitting
t_garch.fit.trend = ugarchfit(spec=t_garch.spec.trend, data=dataf$tsla_price, solver.control=list(trace = 1))
t_garch.fit.trend@fit$hessian
windows(); par(mfcol = c(2,2))
t_garch.spec.trend = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(garchOrder = c(2,2), model = "sGARCH"),
distribution.model = "std" )
t_garch.fit.trend = ugarchfit(spec=t_garch.spec.trend, data=dataf$tsla_price, solver.control=list(trace = 0))
t_garch.spec.trend = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(garchOrder = c(2,2), model = "sGARCH"),
distribution.model = "std" )
t_garch.fit.trend = ugarchfit(spec=t_garch.spec.trend, data=tesla, solver.control=list(trace = 0))
t_garch.roll.trend= ugarchroll(t_garch.spec.trend,data=tesla, n.head = 10, refit.every = 25)
roll_var = report(t_garch.roll.trend, type = "VaR", VaR.alpha = 0.05, conf.level = 0.95)
t_garch.spec.exog = ugarchspec(mean.model = list(armaOrder = c(1,1), external.regressors = NULL),
variance.model = list(garchOrder = c(2,2), model = "sGARCH",  external.regressors =trend_data_2 ),
distribution.model = "std")
t_garch.fit.exog = ugarchfit(spec=t_garch.spec.exog, data=tesla, solver.control=list(trace = 00))
t_garch.roll.exog= ugarchroll(t_garch.spec.exog,data=tesla, n.head = 10, refit.every = 25)
roll_var = report(t_garch.roll.exog, type = "VaR", VaR.alpha = 0.05, conf.level = 0.95)
####cleaning#########
rm(list=ls()) #clear all variables
graphics.off()  # clean up graphic window
cat("\014") #clear the workspace
# Loading Libraries
library(rugarch); library(fGarch); library(rmgarch); library(zoo); library(ggplot2)
### import data##
data = read.csv("C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset2_tesla.csv", header = TRUE, stringsAsFactors = FALSE)
tesla = ts(data[6])
trend_data = ts(data[15])
dates = data[2:nrow(data), 2  ]
tesla = 100*diff(log(tesla))
for(i in ( 2 :length(tesla))){
if ((tesla[i]>50) || (tesla[i]<(-50))){
tesla[i]= tesla[i-1]}
}
trend_data = 100*diff(log(trend_data))
dataf = data.frame(dates,tesla,trend_data)
plot(dataf$tsla_price,type = 'l' )
plot(dataf$tesla_gen_trend, type = 'l' )
summary(trend_data)
summary(tesla)
plot(dataf$tsla_price,dataf$tsla_price )
tesla_2 = ts (tesla)^2 ##############squared returns
trend_data_2 = ts (trend_data)^2 ##############squared returns
plot(tesla[1:(length(tesla[,1])-1), 1], tesla[2:length(tesla[,1]), 1]^2, ylab = 'tesla_sq.ret', xlab = 'tesla_lag')
lines(ksmooth(tesla[1:(length(tesla[,1])-1), 1], tesla[2:length(tesla[,1]), 1]^2, 'normal', bandwidth = 6), col = 'red')
plot(trend_data[1:(length(tesla[,1])-1), 1], tesla[2:length(tesla[,1]), 1]^2, ylab = 'tesla_sq.ret', xlab = 'tesla_lag')
lines(ksmooth(trend_data[1:(length(tesla[,1])-1), 1], tesla[2:length(tesla[,1]), 1]^2, 'normal', bandwidth = 6), col = 'red')
acf_tesla = acf(tesla)
summary(acf_tesla)
lag_corr = ccf(dataf$tsla_price , dataf$tesla_gen_trend)
lag_corr_2 = ccf(tesla_2[ , 1],trend_data_2[ , 1])
reg_tesla_trend = lm(formula = dataf$tsla_price  ~ dataf$tesla_gen_trend, x=TRUE, y=TRUE)
reg_tesla_trend_2 = lm(formula = (dataf$tsla_price )^2 ~ (dataf$tesla_gen_trend)^2 , x=TRUE, y=TRUE)
summary(reg_tesla_trend)
summary(reg_tesla_trend_2)
plot(reg_tesla_trend)
# Model Fitting
t_garch.fit.trend = ugarchfit(spec=t_garch.spec.trend, data=dataf$tsla_price, solver.control=list(trace = 1))
t_garch.fit.trend@fit$hessian
windows(); par(mfcol = c(2,2))
# Conditional Volatility
plot.ts(sigma(t_garch.fit.trend),
main="trend - Conditional Volatility t-GARCH(1,1)",
xlab = "Number of Observations", ylab="sqrt(h_t)", col="green4")
# Standardized Residuals
std.res_tgarch_trend = ts(as.numeric(residuals(t_garch.fit.trend, standardize=TRUE)))
plot(std.res_tgarch_trend, main='Standardized Residuals', xlab='Number of Observations', ylab='Standardized Residuals')
acf((std.res_tgarch_trend)^2, main='ACF - Standardized Squared Residuals')
plot(t_garch.fit.trend, which=9)
summary(std.res_tgarch_trend); skewness(std.res_tgarch_trend); kurtosis(std.res_tgarch_trend)
summary(sigma(t_garch.fit.trend))
t_garch.spec.trend = ugarchspec(mean.model = list(armaOrder = c(0,0)),
variance.model = list(garchOrder = c(1,1), model = "sGARCH"),
distribution.model = "std" )
# Model Fitting
t_garch.fit.trend = ugarchfit(spec=t_garch.spec.trend, data=dataf$tsla_price, solver.control=list(trace = 1))
t_garch.fit.trend@fit$hessian
windows(); par(mfcol = c(2,2))
plot.ts(sigma(t_garch.fit.trend),
main="trend - Conditional Volatility t-GARCH(1,1)",
xlab = "Number of Observations", ylab="sqrt(h_t)", col="green4")
######################################t- GARCH (1,1)
t_garch.spec.trend = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(garchOrder = c(2,2), model = "sGARCH"),
distribution.model = "std" )
# Model Fitting
t_garch.fit.trend = ugarchfit(spec=t_garch.spec.trend, data=dataf$tsla_price, solver.control=list(trace = 1))
t_garch.fit.trend@fit$hessian
windows(); par(mfcol = c(2,2))
# Conditional Volatility
plot.ts(sigma(t_garch.fit.trend),
main="trend - Conditional Volatility t-GARCH(2,2)",
xlab = "Number of Observations", ylab="sqrt(h_t)", col="green4")
# Standardized Residuals
std.res_tgarch_trend = ts(as.numeric(residuals(t_garch.fit.trend, standardize=TRUE)))
plot(std.res_tgarch_trend, main='Standardized Residuals', xlab='Number of Observations', ylab='Standardized Residuals')
acf((std.res_tgarch_trend)^2, main='ACF - Standardized Squared Residuals')
plot(t_garch.fit.trend, which=9)
summary(std.res_tgarch_trend); skewness(std.res_tgarch_trend); kurtosis(std.res_tgarch_trend)
summary(sigma(t_garch.fit.trend))
t_garch.spec.trend = ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(garchOrder = c(2,2), model = "sGARCH"),
distribution.model = "std" )
t_garch.fit.trend = ugarchfit(spec=t_garch.spec.trend, data=tesla, solver.control=list(trace = 0))
t_garch.roll.trend= ugarchroll(t_garch.spec.trend,data=tesla, n.head = 10, refit.every = 25)
roll_var = report(t_garch.roll.trend, type = "VaR", VaR.alpha = 0.05, conf.level = 0.95)
t_garch.spec.exog = ugarchspec(mean.model = list(armaOrder = c(1,1), external.regressors = NULL),
variance.model = list(garchOrder = c(2,2), model = "sGARCH",  external.regressors =trend_data_2 ),
distribution.model = "std")
t_garch.fit.exog = ugarchfit(spec=t_garch.spec.exog, data=tesla, solver.control=list(trace = 00))
t_garch.roll.exog= ugarchroll(t_garch.spec.exog,data=tesla, n.head = 10, refit.every = 25)
roll_var = report(t_garch.roll.exog, type = "VaR", VaR.alpha = 0.05, conf.level = 0.95)
plot(tesla_2,col= "red")
lines(trend_data_2)
cor(tesla_2,trend_data_2)
write.xlsx(dataf, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/graph.xlsx")
write.xlsx(data, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/graph2.xlsx")
sigma_trend = t_garch.fit.trend@fit$sigma
sigma_exog = t_garch.fit.exog@fit$sigma
Var_exog = t_garch.roll.exog@forecast[["VaR"]][["alpha(5%)"]]
Var_trend=t_garch.roll.trend@forecast[["VaR"]][["alpha(5%)"]]
sigma=cbind(sigma_exog,sigma_trend[2:581])
VaR= cbind(Var_exog, Var_trend)
residuals_exog = (t_garch.fit.exog@fit[["residuals"]])
residuals_trend = (t_garch.fit.trend@fit[["residuals"]])
redisuals = cbind(residuals_exog, residuals_trend[2:581])
residuals_2 = residuals
write.xlsx(sigma, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/sigma2.xlsx")
write.xlsx(VaR, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/VaR.xlsx")
write.xlsx(residuals_exog, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/residuals.xlsx")
write.xlsx(residuals_trend, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/residuals_2.xlsx")
#########################################graph export ########################à
write.xlsx(dataf, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/graph.xlsx")
# Loading Libraries
library(rugarch); library(fGarch); library(rmgarch); library(zoo); library(ggplot2); library(xlsx)
#########################################graph export ########################à
write.xlsx(dataf, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/graph.xlsx")
write.xlsx(data, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/graph2.xlsx")
sigma_trend = t_garch.fit.trend@fit$sigma
sigma_exog = t_garch.fit.exog@fit$sigma
Var_exog = t_garch.roll.exog@forecast[["VaR"]][["alpha(5%)"]]
Var_trend=t_garch.roll.trend@forecast[["VaR"]][["alpha(5%)"]]
sigma=cbind(sigma_exog,sigma_trend[2:581])
VaR= cbind(Var_exog, Var_trend)
residuals_exog = (t_garch.fit.exog@fit[["residuals"]])
residuals_trend = (t_garch.fit.trend@fit[["residuals"]])
redisuals = cbind(residuals_exog, residuals_trend[2:581])
residuals_2 = residuals
write.xlsx(sigma, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/sigma2.xlsx")
write.xlsx(VaR, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/VaR.xlsx")
write.xlsx(residuals_exog, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/residuals.xlsx")
write.xlsx(residuals_trend, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset_graph/residuals_2.xlsx")
#########################################graph export ########################à
write.xlsx(dataf, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset_graph/graph.xlsx")
write.xlsx(data, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset_graph/graph2.xlsx")
sigma_trend = t_garch.fit.trend@fit$sigma
sigma_exog = t_garch.fit.exog@fit$sigma
Var_exog = t_garch.roll.exog@forecast[["VaR"]][["alpha(5%)"]]
Var_trend=t_garch.roll.trend@forecast[["VaR"]][["alpha(5%)"]]
sigma=cbind(sigma_exog,sigma_trend[2:581])
VaR= cbind(Var_exog, Var_trend)
residuals_exog = (t_garch.fit.exog@fit[["residuals"]])
residuals_trend = (t_garch.fit.trend@fit[["residuals"]])
redisuals = cbind(residuals_exog, residuals_trend[2:581])
residuals_2 = residuals
write.xlsx(sigma, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset_graph/sigma2.xlsx")
write.xlsx(VaR, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset_graph/VaR.xlsx")
write.xlsx(residuals_exog, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset_graph/residuals.xlsx")
write.xlsx(residuals_trend, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset_graph/residuals_2.xlsx")
sigma=cbind(sigma_exog,sigma_trend[2:581])
sigma=cbind(sigma_exog,sigma_trend)
redisuals = cbind(residuals_exog, residuals_trend)
sigma_trend = t_garch.fit.trend@fit$sigma
sigma_exog = t_garch.fit.exog@fit$sigma
Var_exog = t_garch.roll.exog@forecast[["VaR"]][["alpha(5%)"]]
Var_trend=t_garch.roll.trend@forecast[["VaR"]][["alpha(5%)"]]
sigma=cbind(sigma_exog,sigma_trend)
VaR= cbind(Var_exog, Var_trend)
residuals_exog = (t_garch.fit.exog@fit[["residuals"]])
residuals_trend = (t_garch.fit.trend@fit[["residuals"]])
redisuals = cbind(residuals_exog, residuals_trend)
residuals_2 = residuals
write.xlsx(sigma, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset_graph/sigma2.xlsx")
write.xlsx(VaR, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset_graph/VaR.xlsx")
write.xlsx(residuals_exog, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset_graph/residuals.xlsx")
write.xlsx(residuals_trend, "C:/Users/MARCOFIORAVANTIPC/Google Drive/MSC FINANCE AND BANKING/thesis_2/apollo 3/dataset/dataset_graph/residuals_2.xlsx")
View(t_garch.roll.exog)
View(t_garch.roll.exog)
roll_var = report(t_garch.roll.trend, type = "VaR", VaR.alpha = 0.05, conf.level = 0.95)
roll_var_exg = report(t_garch.roll.exog, type = "VaR", VaR.alpha = 0.05, conf.level = 0.95)
View(roll_var)
roll_var@model[["keep.coef"]]
roll_var@model[["coef"]]
View(roll_var_exg)
View(roll_var_exg)
roll_var_exg@model[["coef"]]
